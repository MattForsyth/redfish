knitr::opts_chunk$set(echo = TRUE)
source('../R_code/00.r')
View(dataset)
View(dataset)
source('../R_code/00.r')
View(dataset)
source('../R_code/00.r')
source('../R_code/00.r')
View(dataset)
nutrientRange(dataset[,7],
dataset[,c(15,17,3:35)],
depth1 = 0,
depth2= 15,
depth3 = 80,
depth4 = 115)
nutrientRange(dataset[,7],
dataset[,c(15,17,33:35)],
depth1 = 0,
depth2= 15,
depth3 = 80,
depth4 = 115)
colnames(ranges1) <- c('Variable','Minimum','Maximum')
colnames(ranges2) <- c('Variable','Minimum','Maximum')
variables <- c('Alkalinity','pH','Organic carbon','pCO2','Nitrate','Phosphate','SiO2')
units <- c('umol/kg','[in-situ]','umol/kg','uatm','umol/kg','umol/kg','umol/kg')
ranges1$Variable <- variables
nutrientRange(dataset[,7],
dataset[,c(15,17,25,33:35)],
depth1 = 0,
depth2= 15,
depth3 = 80,
depth4 = 115)
colnames(ranges1) <- c('Variable','Minimum','Maximum')
colnames(ranges2) <- c('Variable','Minimum','Maximum')
variables <- c('pH','Alkalinity','pCO2','Nitrate','Phosphate','SiO2')
units <- c('[in-situ]','umol/kg','uatm','umol/kg','umol/kg','umol/kg')
ranges1$Variable <- variables
ranges2$Variable <- variables
ranges1$Units <- units
ranges2$Units <- units
kable(ranges1, digits = 2,
caption = 'Nutrient ranges in the upper 15 meters of the water column')
kable(ranges2, digits = 2,
caption = 'Nutrient ranges between 80 and 115 meters')
stations <- c(284)
generateProfile(dataset[,7],
dataset[,c(15,17,25,33:35)],
dataset$Station,
subsets = stations, size = 1.5, lwd=1)
profile1 <- profile1 +
xlab("pH [in-situ]")
profile2 <- profile2 +
xlab(expression("Alkalinity"~"["~mu~mol~kg^{-1}~"]"))
profile3 <- profile3 +
xlab(expression(pCO[2]~"["~mu~atm~"]"))
profile4 <- profile4 +
xlab(expression(NO[2]^{{textstyle("-")}}+
NO[3]^{{textstyle("-")}}~"["~mu~mol~kg^{-1}~"]"))
profile5 <- profile5 +
xlab(expression(PO[4]^{{textstyle("3-")}}~"["~mu~mol~kg^{-1}~"]"))
profile6 <- profile6 +
xlab(expression(SiO[2]~"["~mu~mol~kg^{-1}~"]"))
grid.arrange(profile1,profile2,profile3,profile4,profile5,profile6,ncol=2)
stations <- c(284)
generateProfile(dataset[,7],
dataset[,c(15,17,25,33:35)],
dataset$Station,
subsets = stations, size = 1.5, lwd=1)
profile1 <- profile1 +
xlab("pH [in-situ]")
profile2 <- profile2 +
xlab(expression("Alkalinity"~"["~mu~mol~kg^{-1}~"]"))
profile3 <- profile3 +
xlab(expression(pCO[2]~"["~mu~atm~"]"))
profile4 <- profile4 +
xlab(expression(NO[2]^{{textstyle("-")}}+
NO[3]^{{textstyle("-")}}~"["~mu~mol~kg^{-1}~"]"))
profile5 <- profile5 +
xlab(expression(PO[4]^{{textstyle("3-")}}~"["~mu~mol~kg^{-1}~"]"))
profile6 <- profile6 +
xlab(expression(SiO[2]~"["~mu~mol~kg^{-1}~"]"))
grid.arrange(profile1,profile2,profile3,profile4,profile5,profile6,ncol=2)
par(mfrow=c(2,2))
surfacePlot(dataset$Nominal.Depth..m.,
dataset$Latitude..degrees_north.,
dataset$Longitude..degrees_east.,
dataset[,c(33:36)],
plot_depth = 10)
par(mfrow=c(2,2))
surfacePlot(dataset$Nominal.Depth..m.,
dataset$Latitude..degrees_north.,
dataset$Longitude..degrees_east.,
dataset[,c(33:35)],
plot_depth = 10)
depth_column <- dataset$Nominal.Depth..m.
latitude <- dataset$Latitude..degrees_north.
longitude <- dataset$Longitude..degrees_east.
measurements <- dataset[,33:35]
plot_depth <- 10
surface <- T
contour <- F
measurements <- data.frame(measurements)
suppressWarnings(library(oce))
suppressWarnings(library(ocedata))
library(gsw)
df <- data.frame(depth_column,latitude,longitude,measurements)
colnames(df)[1] <- "depth"
colnames(df)[2] <- "lat"
colnames(df)[3] <- "lon"
df <- subset(df, depth <= plot_depth)
lat <- df[,2]
lon <- df[,3]
variables <- df[,4:length(df)]
var_names <- colnames(df[4:length(df)])
asp <- 1/cos(pi/180*mean(lat))
data("coastlineWorldMedium",package = "ocedata")
for(x in 4:length(df)){
xr <- 3
yr <- xr/asp
g <- interpBarnes(lon,lat,df[,x], xr = xr, yr = yr, trim = 0.5)
nam <- paste("interpResults",x-3,sep="")
assign(nam,g,envir=.GlobalEnv)
if (surface == T){
surf <- imagep(g$xg, g$yg, g$zg,asp=1/cos(pi/180*mean(lat)), col = oceColorsViridis)
lines(coastlineWorldMedium[["longitude"]],coastlineWorldMedium[["latitude"]])
mtext(LETTERS[x-3],side=3)
}
else {}
if (contour == T){
cont <- contour(g$xg, g$yg, g$zg, asp = asp)
lines(coastlineWorldMedium[["longitude"]],coastlineWorldMedium[["latitude"]])
text(lon,lat,round(df[,x],0), col=2, cex = 0.7 )
mtext(LETTERS[x-3],side=3)
}
else {}
}
View(measurements)
df
View(df)
contour <- T
for(x in 4:length(df)){
xr <- 3
yr <- xr/asp
g <- interpBarnes(lon,lat,df[,x], xr = xr, yr = yr, trim = 0.5)
nam <- paste("interpResults",x-3,sep="")
assign(nam,g,envir=.GlobalEnv)
if (surface == T){
surf <- imagep(g$xg, g$yg, g$zg,asp=1/cos(pi/180*mean(lat)), col = oceColorsViridis)
lines(coastlineWorldMedium[["longitude"]],coastlineWorldMedium[["latitude"]])
mtext(LETTERS[x-3],side=3)
}
else {}
if (contour == T){
cont <- contour(g$xg, g$yg, g$zg, asp = asp)
lines(coastlineWorldMedium[["longitude"]],coastlineWorldMedium[["latitude"]])
text(lon,lat,round(df[,x],0), col=2, cex = 0.7 )
mtext(LETTERS[x-3],side=3)
}
else {}
}
par(mfrow=c(2,2))
surfacePlot(dataset$Nominal.Depth..m.,
dataset$Latitude..degrees_north.,
dataset$Longitude..degrees_east.,
dataset[,c(33:35)],
plot_depth = 10)
stations <- c(284)
generateProfile(dataset[,7],
dataset[,c(15,17,25,33:35)],
dataset$Station,
subsets = stations, size = 1.5, lwd=1)
profile1 <- profile1 +
xlab("pH [in-situ]")
profile2 <- profile2 +
xlab(expression("Alkalinity"~"["~mu~mol~kg^{-1}~"]"))
profile3 <- profile3 +
xlab(expression(pCO[2]~"["~mu~atm~"]"))
profile4 <- profile4 +
xlab(expression(NO[2]^{{textstyle("-")}}+
NO[3]^{{textstyle("-")}}~"["~mu~mol~kg^{-1}~"]"))
profile5 <- profile5 +
xlab(expression(PO[4]^{{textstyle("3-")}}~"["~mu~mol~kg^{-1}~"]"))
profile6 <- profile6 +
xlab(expression(SiO[2]~"["~mu~mol~kg^{-1}~"]"))
grid.arrange(profile1,profile2,profile3,profile4,profile5,profile6,ncol=2)
nutrientRange(dataset[,7],
dataset[,c(15,17,25,33:35)],
depth1 = 0,
depth2= 15,
depth3 = 80,
depth4 = 115)
colnames(ranges1) <- c('Variable','Minimum','Maximum')
colnames(ranges2) <- c('Variable','Minimum','Maximum')
variables <- c('pH','Alkalinity','pCO2','Nitrate','Phosphate','SiO2')
units <- c('[in-situ]','umol/kg','uatm','umol/kg','umol/kg','umol/kg')
ranges1$Variable <- variables
ranges2$Variable <- variables
ranges1$Units <- units
ranges2$Units <- units
kable(ranges1, digits = 2,
caption = 'Nutrient ranges in the upper 15 meters of the water column')
kable(ranges2, digits = 2,
caption = 'Nutrient ranges between 80 and 115 meters')
